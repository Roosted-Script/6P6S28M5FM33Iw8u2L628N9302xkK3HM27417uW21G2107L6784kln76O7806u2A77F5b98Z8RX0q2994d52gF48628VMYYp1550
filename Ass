--Please don't edit code without Money Maker permission :>
repeat task.wait() until game:IsLoaded()
repeat task.wait() until _G.Webhook
task.wait()
local scrip = {}
if game.PlaceId == 3260590327 and not getgenv().ExecutedAlr or game.PlaceId == 5591597781 and not getgenv().ExecutedAlr then
    if not getgenv().ExecutedAlr then
    if not getexecutorname then
        function getexecutorname() return 'Other'; end
    elseif not string.find(getexecutorname(),"ScriptWare") then
        function getexecutorname() return 'Other'; end
    end
    fileprefix = "TDS_AutoStrat/"
    if syn and not getgenv().IsMultiStrat and not getgenv().ExecDis and not getgenv().Multiplayer then 
    syn.queue_on_teleport("loadstring(readfile(\""..fileprefix.."LastStrat.txt\"))()")
    elseif not getgenv().IsMultiStrat and not getgenv().ExecDis and not getgenv().Multiplayer then
    queue_on_teleport("loadstring(readfile(\""..fileprefix.."LastStrat.txt\"))()")
    end
    getgenv().ExecutedAlr = true
    getgenv().MapUsed = false
    loadstring(game:HttpGet("https://raw.githubusercontent.com/banbuskox/dfhtyxvzexrxgfdzgzfdvfdz/main/sjkdkjlfdjnnmklcvxjNotifCr"))()
    if isfile("DNR.txt") and not isfolder("TDS_AutoStrat") then
        say("ERROR","Root folder removed, recreating files!", 5)
        makefolder("TDS_AutoStrat")
        writefile(fileprefix.."Webhook (Logs).txt","WEBHOOK HERE")
        writefile(fileprefix.."LastLog.txt","")
        writefile(fileprefix.."LastPrintLog.txt","")
        writefile(fileprefix.."LastStrat.txt","")
        writefile(fileprefix.."PrivateServer.txt","PRIVATE SERVER LINK HERE")
        writefile(fileprefix.."UseCount.txt",readfile("DNR.txt"))
        wait(0.5)
        say("SUCCESS","Files recreated! Don't remove this folder again!", 5)
    end
    if not isfolder("TDS_AutoStrat") then
        makefolder("TDS_AutoStrat")
    end
    if not isfile("DNR.txt") then
        writefile("DNR.txt","1")
    end
    if not isfile(fileprefix.."UseCount.txt") then
        writefile(fileprefix.."UseCount.txt","1")
    end
    loadstring(game:HttpGet("https://raw.githubusercontent.com/Roosted-Script/6P6S28M5FM33Iw8u2L628N9302xkK3HM27417uW21G2107L6784kln76O7806u2A77F5b98Z8RX0q2994d52gF48628VMYYp1550/main/57LH5G4642JN2"))()
    loadstring(game:HttpGet("https://banbusscripts.netlify.app/Scripts/IsAutoStratMain"))()
    if getgenv().StratMaintance == true then
        repeat
            task.wait()
            loadstring(game:HttpGet("https://banbusscripts.netlify.app/Scripts/IsAutoStratMain"))()
            getgenv().status = "Script in maintenance, waiting..."
            wait(1)
        until getgenv().StratMaintance == false or getgenv().SkipStratMaintance == true
    end
    getgenv().status = "Loading"
    getgenv().count = 0
    if game.PlaceId == 5591597781 then
        game:GetService("Workspace").Towers.ChildAdded:Connect(function(v)
            getgenv().count = getgenv().count + 1
        end)
    end
    local c = readfile(fileprefix.."UseCount.txt")
    c = tonumber(c) + 1
    writefile(fileprefix.."UseCount.txt",tostring(c))
    writefile("DNR.txt",tostring(c))
    local output = nil
    local RS = game:WaitForChild('ReplicatedStorage')
    local RSRF = RS:WaitForChild("RemoteFunction")
    local RSRE = RS:WaitForChild("RemoteEvent")
    function isgame()
        if game.PlaceId == 5591597781 then
            return true
        else
            return false
        end
    end
    stateRep = nil
    if isgame() then
        function getStateRep() for i,v in pairs(RS.StateReplicators:GetChildren()) do if v:GetAttribute("TimeScale") then return v end end end
        repeat stateRep = getStateRep() until stateRep
    end
    spawn(function()
        wait(10)
        if isgame() and #game.Players:GetChildren() > 1 and getgenv().Multiplayer == false then
            game:GetService("TeleportService"):Teleport(3260590327, game:GetService("Players").LocalPlayer)
        else if isgame() and getgenv().Multiplayer and #game.Players:GetChildren() > getgenv().PlayerNumber and getgenv().PlayerType == "Host" then
            local pageLimit = math.huge
            local HttpService = game:GetService('HttpService');
            local TPService = game:GetService("TeleportService");
            local nextCursor, serverId;
            local minimum = math.huge;
            local Page = 0;
            repeat
                local Url = "https://games.roblox.com/v1/games/" .. game.PlaceId .. "/servers/Public?sortOrder=Asc&limit=100";
                if (nextCursor) then Url = Url .. "&cursor=" .. nextCursor end;
                local Servers = HttpService:JSONDecode(game:HttpGet(Url));
                if (Servers) then
                    nextCursor = Servers.nextPageCursor or nil;
                    Page = Page + 1;
                    for _,v in pairs(Servers.data) do
                        v.playing = v.playing or math.huge;
                        v.id = v.id or '';
                        if v.id ~= game.JobId and v.playing <= minimum then
                            minimum = v.playing;
                            serverId = v.id;
                        end
                    end
                end
            until (not nextCursor) or (Page >= pageLimit);
            if (serverId) then
                getgenv().Connection:Send('{"client":"Host","action":"Teleport","jobid":"'..serverId..'"}')
                TPService:TeleportToPlaceInstance(3260590327, serverId);
            end
        end
    end
    end)
    --[[
    if not isgame() then
        wait(1)
        if not isfolder("TDS_AutoStrat") then
            makefolder("TDS_AutoStrat")
        end
        if not isfile(fileprefix.."Troll.txt") then
            local check = game:GetService("Players").LocalPlayer:WaitForChild("PlayerGui")
            local check1 = check:WaitForChild("LobbyGui")
            local noti = game:GetService("Players").LocalPlayer.PlayerGui.LobbyGui.Prompt.Containers.Message.Notice
            local gui = game:GetService("Players").LocalPlayer.PlayerGui.LobbyGui
            noti.Message.Text = "We are sorry to announce this to you, your account has been detected using one of the following cheats/scripts : AutoFarm, AutoStrat, Equipper, TDS Recorder. Your account has been reseted and you got disqualified from this event and every upcoming one."
            noti.Visible = true
            noti.Active = true
            gui.Menu.Buttons.Achievements:Remove()
            for i, v in pairs(game:GetService("Players").LocalPlayer.PlayerGui.LobbyGui.Hotbar.Troops:GetDescendants()) do
                if v.Name == "Hint" or v.Name == "Icon" or v.Name == "Label" then
                    v:Remove()
                end
            end
            gui.Hotbar.Level.Label.Text = "Level 0 [0/10]"
            gui.Hotbar.Level.Bar:Remove()
            gui.Hotbar.Stats.Triumphs.Amount.Text = "0"
            gui.Hotbar.Stats.Wins.Amount.Text = "0"
            gui.Menu.Containers.Shop:Remove()
            for i, v in pairs(gui.Menu.Containers.Inventory.Content.Pages.Troops.Display:GetDescendants()) do
                v:Remove()
            end
            for i, v in pairs(gui.Menu.Containers.Inventory.Content.Pages.Troops.Holder.Troops:GetDescendants()) do
                v:Remove()
            end
            for i, v in pairs(gui.Menu.Containers.Inventory.Content.Pages.Emotes.Display:GetDescendants()) do
                v:Remove()
            end
            for i, v in pairs(gui.Menu.Containers.Inventory.Content.Pages.Emotes.Holder:GetDescendants()) do
                v:Remove()
            end
            for i, v in pairs(gui.Menu.Containers.Inventory.Content.Pages.Crates.Display:GetDescendants()) do
                v:Remove()
            end
            for i, v in pairs(gui.Menu.Containers.Inventory.Content.Pages.Crates.Holder:GetDescendants()) do
                v:Remove()
            end
            writefile(fileprefix.."Troll.txt", "ctnC+5tLWhjjJZccUxSTG8casrMsCITT/za/3ELcQSVzz/Wm0xpJ2Ksf11a/ZZkDcuZ4fLp3SCz23g2zeiAnVaygF1HK6IgZvZqibdDKAgqz20JoMIZhJ4OofcXh+hspdYxF2WAJXsd1Ixx9FXwOSg==")
            writefile("xdieee.txt", "KxjhVghCJH")
        else
            local noti = game:GetService("Players").LocalPlayer.PlayerGui.LobbyGui.Prompt.Containers.Message.Notice
            noti.Message.Text = "Thing with data wipe was a joke lol, have a nice day!"
            noti.Visible = true
            noti.Active = true
            spawn(function()
            wait(3)
            noti.Visible = false
            end)
        end
    end
    ]]
    if isgame() and getgenv().PotatoPC then
        spawn(function()
            wait(3)
            for i, v in pairs(game.Workspace.Map:GetChildren()) do
                if v.Name ~= "Paths" then
                    v:Remove()
                end
            end
            local ter = game.Workspace.Terrain
            ter.Transparency = 0
            ter.WaterReflectance = 0
            ter.WaterTransparency = 0
            ter.WaterWaveSize = 0
            ter.WaterWaveSpeed = 0
        end)
    end
    if isgame() then
        spawn(function()
            wait(3)
            if game:GetService("Lighting"):FindFirstChild("Blur") then
                game:GetService("TweenService"):Create(game:GetService("Lighting"):WaitForChild("Blur"), TweenInfo.new(0.5, Enum.EasingStyle.Cubic, Enum.EasingDirection.Out), {
                    Size = 0
                }):Play()
            end
            game.Lighting.FogStart = 10000000
            game.Lighting.FogEnd = 10000000
            game.Lighting.Brightness = 1
            if game.CoreGui:FindFirstChild("AutoStratsLogger") then
                game.CoreGui:FindFirstChild("AutoStratsLogger"):Remove()
            end
            local LoggerByBanbus = Instance.new("ScreenGui")
            local Main = Instance.new("Frame")
            local Glow = Instance.new("ImageLabel")
            local Top_Container = Instance.new("Frame")
            local Title = Instance.new("TextLabel")
            local Scroll = Instance.new("ScrollingFrame")

            LoggerByBanbus.Name = "AutoStratsLogger"
            LoggerByBanbus.Parent = game:WaitForChild("CoreGui")
            LoggerByBanbus.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

            Main.Name = "Main"
            Main.Parent = LoggerByBanbus
            Main.BackgroundColor3 = Color3.fromRGB(23, 21, 30)
            Main.BorderSizePixel = 0
            Main.Position = UDim2.new(0.544935644, 0, 0.355803162, 0)
            Main.Size = UDim2.new(0, 500, 0, 400)

            Glow.Name = "Glow"
            Glow.Parent = Main
            Glow.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            Glow.BackgroundTransparency = 1.000
            Glow.BorderSizePixel = 0
            Glow.Position = UDim2.new(0, -15, 0, -15)
            Glow.Size = UDim2.new(1, 30, 1, 30)
            Glow.ZIndex = 0
            Glow.Image = "rbxassetid://4996891970"
            Glow.ImageColor3 = Color3.fromRGB(15, 15, 15)
            Glow.ScaleType = Enum.ScaleType.Slice
            Glow.SliceCenter = Rect.new(20, 20, 280, 280)

            Top_Container.Name = "Top_Container"
            Top_Container.Parent = Main
            Top_Container.AnchorPoint = Vector2.new(0.5, 0)
            Top_Container.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            Top_Container.BackgroundTransparency = 1.000
            Top_Container.Position = UDim2.new(0.5, 0, 0, 18)
            Top_Container.Size = UDim2.new(1, -40, 0, 20)

            Title.Name = "Title"
            Title.Parent = Top_Container
            Title.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            Title.BackgroundTransparency = 1.000
            Title.Position = UDim2.new(0.00764120743, 0, -0.400000006, 0)
            Title.Size = UDim2.new(0.981785059, 0, 1.45000005, 0)
            Title.Font = Enum.Font.GothamBlack
            Title.Text = "AUTOSTRATS LOGGER"
            Title.TextColor3 = Color3.fromRGB(255, 255, 255)
            Title.TextSize = 30.000
            Title.TextXAlignment = Enum.TextXAlignment.Left

            Scroll.Name = "Scroll"
            Scroll.Parent = Main
            Scroll.Active = true
            Scroll.AnchorPoint = Vector2.new(0.5, 0)
            Scroll.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            Scroll.BackgroundTransparency = 1.000
            Scroll.BorderSizePixel = 0
            Scroll.Position = UDim2.new(0.5, 4, 0, 59)
            Scroll.Size = UDim2.new(1, -20, 1, -67)
            Scroll.BottomImage = "rbxassetid://5234388158"
            Scroll.CanvasSize = UDim2.new(200, 0, 100, 0)
            Scroll.MidImage = "rbxassetid://5234388158"
            Scroll.ScrollBarThickness = 8
            Scroll.TopImage = "rbxassetid://5234388158"
            Scroll.VerticalScrollBarInset = Enum.ScrollBarInset.Always

            Scroll.ChildAdded:Connect(function()
                if #Scroll:GetChildren() > 16 then
                    Scroll.CanvasPosition = Vector2.new(0,Scroll.CanvasPosition.Y + 20)
                end
            end)

            local function drag()
                local script = Instance.new('LocalScript', Main)
                script.Name = "Dragify"
                local UIS = game:GetService("UserInputService")
                function dragify(Frame)
                    dragToggle = nil
                    dragInput = nil
                    dragStart = nil
                    local dragPos = nil
                    function updateInput(input)
                        local Delta = input.Position - dragStart
                        local Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + Delta.X, startPos.Y.Scale, startPos.Y.Offset + Delta.Y)
                        game:GetService("TweenService"):Create(Frame, TweenInfo.new(0.1), {
                            Position = Position
                        }):Play()
                    end
                    Frame.InputBegan:Connect(function(input)
                        if (input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch) and UIS:GetFocusedTextBox() == nil then
                            dragToggle = true
                            dragStart = input.Position
                            startPos = Frame.Position
                            input.Changed:Connect(function()
                                if input.UserInputState == Enum.UserInputState.End then
                                    dragToggle = false
                                end
                            end)
                        end
                    end)
                    Frame.InputChanged:Connect(function(input)
                        if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
                            dragInput = input
                        end
                    end)
                    game:GetService("UserInputService").InputChanged:Connect(function(input)
                        if input == dragInput and dragToggle then
                            updateInput(input)
                        end
                    end)
                end
                dragify(script.Parent)
            end
            drag()
            local function positioning()
                local script = Instance.new('LocalScript', Main)
                script.Name = "Positioning"
                script.Parent:TweenPosition(UDim2.new(0.5, 0, 0.5, 0), "Out", "Quad", 1)
                script.Parent.Draggable = true
            end
            positioning()
            local prevOutputPos = -0.0073
            writefile(fileprefix.."LastLog.txt", "--[START OF LOG]--")
            function TimeConverter(v)
                if v <= 9 then
                    local conv = "0"..v
                    return conv
                else
                    return v
                end
            end
            getgenv().output = function(msg)
                local hours = os.date("*t")["hour"]
                local mins = os.date("*t")["min"]
                local sec = os.date("*t")["sec"]
                local colour = Color3.fromRGB(255, 255, 255)
                local o = Instance.new("TextLabel", Scroll)
                o.Text = "["..TimeConverter(hours)..":"..TimeConverter(mins)..":"..TimeConverter(sec).."] "..msg
                appendfile(fileprefix.."LastLog.txt", "\n["..TimeConverter(hours)..":"..TimeConverter(mins)..":"..TimeConverter(sec).."] "..msg)
                o.Size = UDim2.new(0.005, 0, 0.001, 0)
                o.Position = UDim2.new(0, 0, .007 + prevOutputPos , 0)
                o.Font = Enum.Font.SourceSansSemibold
                o.TextColor3 = colour
                o.TextStrokeTransparency = 0
                o.BackgroundTransparency = 1
                o.BackgroundColor3 = Color3.new(0, 0, 0)
                o.BorderSizePixel = 0
                o.BorderColor3 = Color3.new(0, 0, 0)
                o.FontSize = "Size14"
                o.TextXAlignment = Enum.TextXAlignment.Left
                o.ClipsDescendants = true
                prevOutputPos = prevOutputPos + 0.0005
            end
        end)
    end
    spawn(function()
    if isgame() and getgenv().Debug then
        game.Workspace.Towers.ChildAdded:Connect(function(v)
            wait(1)
            repeat task.wait() until tonumber(v.Name)
            local bill = Instance.new("BillboardGui")		
            bill.Parent = v:WaitForChild("HumanoidRootPart")
            bill.Adornee = v:WaitForChild("HumanoidRootPart")
            bill.StudsOffsetWorldSpace = Vector3.new(0,2,0)
            bill.Size = UDim2.new(0, 250, 0, 50)
            bill.AlwaysOnTop = true
            local textLabel = Instance.new("TextLabel")
            textLabel.Parent = bill
            textLabel.BackgroundTransparency = 1
            textLabel.Text = v.Name
            textLabel.Font = "Legacy"
            textLabel.Size = UDim2.new(1,0,0,70)
            textLabel.TextSize = 52
            textLabel.TextScaled = fals
            textLabel.TextColor3 = Color3.new(0,0,0)
            textLabel.TextStrokeColor3 = Color3.new(0,0,0)
            textLabel.TextStrokeTransparency = 0.5
            local textLabel = Instance.new("TextLabel")
            textLabel.Parent = bill
            textLabel.BackgroundTransparency = 1
            textLabel.Text = v.Name
            textLabel.Font = "Legacy"
            textLabel.Size = UDim2.new(1,0,0,70)
            textLabel.TextSize = 50
            textLabel.TextScaled = false
            textLabel.TextColor3 = Color3.new(1,0,0)
            textLabel.TextStrokeColor3 = Color3.new(0,0,0)
            textLabel.TextStrokeTransparency = 0.5
        end)
    end
    end)
    if not isgame() then
        repeat task.wait(1) until RSRF:InvokeServer("Session", "Search", "Login").Time
        if os.time() - RSRF:InvokeServer("Session", "Search", "Login").Time >= 86400 then
            RSRF:InvokeServer("Login", "Claim")
            RSRF:InvokeServer("Session", "Search", "Login")
        end
    if getgenv().AutoBuy then
    getgenv().status = "Buying crates..."
    local data = require(RS.Assets.Crates[getgenv().Crate].Data)
    local pricetype,price = data.Price.Type,data.Price.Value
    if pricetype == "Coins" then
    ltimes = math.floor(game.Players.LocalPlayer.Coins.Value / price)
    if ltimes ~= 0 then
    for c=1,ltimes do
    RSRF:InvokeServer("Shop","Purchase",{["Name"] = getgenv().Crate,["Type"] = "Crate"})
    print("Bought "..getgenv().Crate.." Crate")
    wait(1)
    table1 = {}
    for TowerName, Tower in next, RSRF:InvokeServer("Inventory", "Execute", "Crates", "Open", {["Name"] = getgenv().Crate}) do
        table.insert(table1, Tower)
    end;
    if readfile(fileprefix.."Webhook (Logs).txt") ~= "WEBHOOK HERE" then
    url = readfile(fileprefix.."Webhook (Logs).txt")
            local data = {
                ["username"] = "TDS AutoStrat LOGGER",
                ["embeds"] = {
                    {
                    ["title"] = "**LOG ("..TimeConverter(os.date("*t").year).."-"..TimeConverter(os.date("*t").month).."-"..TimeConverter(os.date("*t").day).." "..TimeConverter(os.date("*t").hour)..":"..TimeConverter(os.date("*t").min)..":"..TimeConverter(os.date("*t").sec)..")**",
                    ["description"] = "**		------------ OPENED CRATE ------------**\n**Troop : **"..table1[2].."\n**Skin : **"..table1[4].."\n**Skin Rarity : **"..table1[3].."\n**Skin Price : **"..tostring(table1[1]),
                    ["type"] = "rich",
                    ["color"] = tonumber(16744448)
                    }
                }
                }
                local newdata = game:GetService("HttpService"):JSONEncode(data)
                local headers = {
                ["content-type"] = "application/json"
                }
                request = http_request or request or HttpPost or syn.request
                local abcdef = {Url = url, Body = newdata, Method = "POST", Headers = headers}
                request(abcdef)
                print("Webhook sent")
            end
    end
    end
    else
    warn(getgenv().Crate.." Crate is for robux!")
    end
    end
    end
    function sell(troop)
        if isgame() then
            repeat task.wait() until game.Workspace.Towers:FindFirstChild(tostring(troop))
            RSRF:InvokeServer("Troops","Sell",{["Troop"] = game.Workspace.Towers[tostring(troop)]})
        end
    end
    function getTroopTypeCheck(troop)
        return troop.Replicator:GetAttribute("Type")
    end
    function getTroopType(tr)
    local check = getTroopTypeCheck(tr)
    if check then
        return check
    else
        return "Unable to GET"
    end
    end
    function EquipTroop(troop)
        if not troop or troop == "Nil" then
            troop = "nil"
        end
        if tostring(troop) ~= "nil" and table.find(getgenv().troops5, tostring(troop)) == nil then
            game.Players.LocalPlayer:Kick("\n\n---------- AUTO STRAT ----------\n\nError 2:\nYou don't own "..tostring(troop).." troop.\n\n---------- AUTO STRAT ----------\n")
            wait(0.5)
            while true do end
        end
        RSRE:FireServer("Inventory", "Equip", "tower", troop)
        if not getgenv().GoldenPerks then
            getgenv().GoldenPerks = {}
        end
        if table.find(getgenv().GoldenPerks, troop) then
            RSRE:InvokeServer("Inventory", "Equip", "Golden", troop)
        else
            RSRE:InvokeServer("Inventory", "Unequip", "Golden", troop)
        end
        getgenv().status = "Equipped "..troop
    end
    function CheckTroop(troop)
        if not troop or troop == "Nil" then
            troop = "nil"
        end
        if tostring(troop) ~= "nil" and table.find(getgenv().troops5, tostring(troop)) == nil then
            game.Players.LocalPlayer:Kick("\n\n---------- AUTO STRAT ----------\n\nError 2:\nYou don't own "..tostring(troop).." troop.\n\n---------- AUTO STRAT ----------\n")
            wait(0.5)
            while true do end
        end
    end
    function skip()
        if isgame() then
            RSRF:InvokeServer("Waves","Skip")
            getgenv().output("Skipped Wave")
        end
    end
    function conv(times, timem)
        local seconds = times
        local cnv = timem * 60
        local seconds = seconds + cnv
        return seconds
    end
    writefile(fileprefix.."LastPrintLog.txt","")
    function prints(mess)
        appendfile(fileprefix.."LastPrintLog.txt",tostring(mess).."\n")
        print(tostring(mess))
    end
    function ability(troop, aname)
        if isgame() then
            repeat task.wait() until game.Workspace.Towers:FindFirstChild(tostring(troop))
            RSRF:InvokeServer("Troops","Abilities","Activate",{["Troop"] = game.Workspace.Towers[tostring(troop)],["Name"] = aname})
            getgenv().output("Used Ability (Troop "..getTroopType(game.Workspace.Towers[tostring(troop)]).." With Number "..tostring(troop).." Ability "..aname..")")
        end
    end
    writefile(fileprefix.."LastStrat.txt","")
    if getgenv().PotatoPC then
    appendfile(fileprefix.."LastStrat.txt","getgenv().PotatoPC = true\n")
    end
    if getgenv().Debug then
        appendfile(fileprefix.."LastStrat.txt","getgenv().Debug = true\n")
    end
    if getgenv().GoldenPerks then
        generateline = "getgenv().GoldenPerks = {"
        for c = 1,#getgenv().GoldenPerks do
            generateline = generateline.."\""..getgenv().GoldenPerks[c].."\","
        end
        generateline = generateline.."}\n"
        appendfile(fileprefix.."LastStrat.txt",generateline)
    end
    appendfile(fileprefix.."LastStrat.txt","local TDS = loadstring(game:HttpGet(\"https://raw.githubusercontent.com/Roosted-Script/6P6S28M5FM33Iw8u2L628N9302xkK3HM27417uW21G2107L6784kln76O7806u2A77F5b98Z8RX0q2994d52gF48628VMYYp1550/main/LU6Q9VIdz5c6N863\", true))()\n")
    function scrip:Map(map, antimulti, type)
        appendfile(fileprefix.."LastStrat.txt","TDS:Map('"..map.."', '"..tostring(antimulti).."', '"..type.."')\n")
        getgenv().mapc = map
        if not getgenv().Multiplayer or getgenv().Multiplayer and getgenv().PlayerType == "Host" then
        if type == "Hardcore" and game:GetService("Players").LocalPlayer.Level.Value < 50 then
            game.Players.LocalPlayer:Kick("\n\n---------- AUTO STRAT ----------\n\nError 4:\nYou are not level 50!\nYou can't use Hardcore Mode strats!\n\n---------- AUTO STRAT ----------\n")
            wait(0.5)
            while true do end
        end
        local maxplayers = 1
        if getgenv().Multiplayer and getgenv().PlayerType == "Host" then
            maxplayers = getgenv().PlayerNumber
            repeat getgenv().status = "Waiting for plrs..."; task.wait(); until getgenv().FindMap
        else if getgenv().Multiplayer and getgenv().PlayerType == "Player" then
            getgenv().status = "Host control mode..."
        end
        spawn(function()
        if not isgame() and not getgenv().IsMultiStrat then
            spawn(function()
                getgenv().timer = 0
                while wait(1) do
                    getgenv().timer = getgenv().timer + 1
                end
            end)
            getgenv().repeating = true
            while wait(1) do
                if getgenv().repeating then
                    getgenv().repeating = false
                    local jc = 0
                    for _, Elevators in pairs(game:GetService('Workspace').Elevators:GetChildren()) do
                        local mp = Elevators.State.Map.Title
                        local rq = require(Elevators.Settings).Type
                        local plrs = Elevators.State.Players
                        if type == nil then
                            type = "Survival"
                        end
                        if mp.Value == map and rq == type then
                            if (plrs.Value <= 0) then
                                jc = jc + 1
                                prints("Join attempt...")
                                getgenv().status = "Joining..."
                                RSRF:InvokeServer("Elevators","Enter",Elevators)
                                prints("Joined elavator...")
                                getgenv().status = "Joined"
                                if getgenv().Multiplayer and getgenv().Connection then
                                    getgenv().Connection:Send('{"client":"Host","action":"Elevator","number":'..tostring(_)..'}')
                                end
                                while task.wait() do
                                    getgenv().status = "Joined ("..Elevators.State.Timer.Value.."s)"
                                    if Elevators.State.Timer.Value == 0 then
                                        local s = true
                                        for c=1,100 do
                                        if antimulti and (plrs.Value > maxplayers) then
                                            if getgenv().Multiplayer and getgenv().Connection then
                                                getgenv().Connection:Send('{"client":"Host","action":"LElevator"}')
                                            end
                                            prints("Someone joined, leaving elevator...")
                                            getgenv().status = "Someone joined..."
                                            RSRF:InvokeServer("Elevators","Leave")
                                            getgenv().repeating = true
                                            s = false
                                            break
                                        end
                                        wait(0.01)
                                        end
                                        if Elevators.State.Timer.Value == 0 and s then
                                            getgenv().status = "Teleporting..."
                                            wait(60)
                                            getgenv().status = "Teleport failed!"
                                            RSRF:InvokeServer("Elevators","Leave")
                                            if getgenv().Multiplayer and getgenv().Connection then
                                                getgenv().Connection:Send('{"client":"Host","action":"LElevator"}')
                                            end
                                        else
                                            if getgenv().Multiplayer and getgenv().Connection then
                                                getgenv().Connection:Send('{"client":"Host","action":"LElevator"}')
                                            end
                                            getgenv().status = "Teleport failed! (Timer)"
                                            RSRF:InvokeServer("Elevators","Leave")
                                            getgenv().repeating = true
                                        end
                                    end
                                    if mp.Value == map then
                                        if antimulti then
                                            if (plrs.Value > maxplayers) then
                                                if getgenv().Multiplayer and getgenv().Connection then
                                                    getgenv().Connection:Send('{"client":"Host","action":"LElevator"}')
                                                end
                                                RSRF:InvokeServer("Elevators","Leave")
                                                prints("Someone joined, leaving elevator...")
                                                getgenv().status = "Someone joined..."
                                                getgenv().repeating = true
                                                break
                                            elseif (plrs.Value == 0) then
                                                wait(1)
                                                if (plrs.Value == 0) then
                                                    wait(1)
                                                    if (plrs.Value == 0) then
                                                        wait(1)
                                                        if (plrs.Value == 0) then
                                                            wait(1)
                                                            if (plrs.Value == 0) then
                                                            if getgenv().Multiplayer and getgenv().Connection then
                                                                getgenv().Connection:Send('{"client":"Host","action":"LElevator"}')
                                                            end
                                                            prints("Error")
                                                            getgenv().status = "Error occured, check dev con"
                                                            prints("Error occured, please open ticket on Money Maker Development discord server!")
                                                            RSRF:InvokeServer("Elevators","Leave")
                                                            getgenv().repeating = true
                                                            break
                                                            end
                                                        end
                                                    end
                                                end
                                            end
                                        end
                                    else
                                        RSRF:InvokeServer("Elevators","Leave")
                                        prints("Map changed while joining, leaving...")
                                        if getgenv().Multiplayer and getgenv().Connection then
                                            getgenv().Connection:Send('{"client":"Host","action":"LElevator"}')
                                        end
                                        getgenv().status = "Map changed..."
                                        getgenv().repeating = true
                                        break
                                    end
                                end
                            end
                        end
                    end
                    if jc == 0 then
                        getgenv().repeating = true
                        prints("Waiting for map...")
                        getgenv().status = "Waiting for map..."
                        if getgenv().timer >= 15 then
                        getgenv().status = "Force changing maps..."
                        getgenv().timer = 0
                        for i, v in pairs(game:GetService('Workspace').Elevators:GetChildren()) do
                            local rq = require(v.Settings).Type
                            local plrs = v.State.Players
                            if rq == type and plrs.Value <= 0 then
                                RSRF:InvokeServer("Elevators","Enter",v)
                                wait(1)
                                RSRF:InvokeServer("Elevators","Leave")
                            end
                        end
                        wait(0.6)
                        RSRF:InvokeServer("Elevators","Leave")
                        if getgenv().Multiplayer and getgenv().Connection then
                            getgenv().Connection:Send('{"client":"Host","action":"LElevator"}')
                        end
                        wait(1)
                    end
                end
            end
        end
    end
    end)	
    end
    end
    end
    if not isfolder("TDS_AutoStrat") and not isfile(fileprefix.."Webhook (Logs).txt") then
        makefolder("TDS_AutoStrat")
        writefile(fileprefix.."Webhook (Logs).txt", "WEBHOOK HERE")
    end
    writefile("ulszcszu.txt", "KxjhVghCJH")
    function scrip:Mode(mode)
        appendfile(fileprefix.."LastStrat.txt","TDS:Mode('"..mode.."')\n")
        if isgame() then
            spawn(function()
                local jshd = nil
                repeat
                    jshd = RSRF:InvokeServer('Difficulty', 'Vote', mode)
                    task.wait()
                until jshd
                --getgenv().output("Selected Mode (Mode "..mode..")")
            end)
        end
    end
    function scrip:Loadout(t1, t2, t3, t4, t5)
        getgenv().MapUsed = true
        if t1 == nil then t1 = "nil" end; if t2 == nil then t2 = "nil" end; if t3 == nil then t3 = "nil" end; if t4 == nil then t4 = "nil" end; if t5 == nil then t5 = "nil" end; 
        appendfile(fileprefix.."LastStrat.txt","TDS:Loadout('"..t1.."', '"..t2.."', '"..t3.."', '"..t4.."', '"..t5.."')\n")
        getgenv().status = "Equipping Loadout..."
        getgenv().TroopNameNEW = t1
        getgenv().TroopName2NEW = t2
        getgenv().TroopName3NEW = t3
        getgenv().TroopName4NEW = t4
        getgenv().TroopName5NEW = t5
        getgenv().troops5 = {}
        for i,v in next, RSRF:InvokeServer("Session", "Search", "Inventory.Troops") do
            table.insert(getgenv().troops5, i)
        end
        CheckTroop(t1)
        CheckTroop(t2)
        CheckTroop(t3)
        CheckTroop(t4)
        CheckTroop(t5)
        if not isgame() and not getgenv().IsMultiStrat then
            for TowerName, Tower in next, RSRF:InvokeServer("Session", "Search", "Inventory.Troops") do
                if (Tower.Equipped) then
                    RSRF:InvokeServer("Inventory","Unequip","Tower",{["Name"] = TowerName})
                    getgenv().status = "Removed "..TowerName
                end;
            end;
            EquipTroop(t1)
            EquipTroop(t2)
            EquipTroop(t3)
            EquipTroop(t4)
            EquipTroop(t5)
            getgenv().status = "Loadout Equipped"
            --EquipTroop("Scout")
        end
    end
    getgenv().Placing = false
    getgenv().Upgrading = false
    local function aK(num) -- aK
        if string.split(tostring(num), ".")[2] then
            return tonumber("0." .. string.split(tostring(num), ".")[2])
        else
            return 0
        end
    end
    local function aL(num) -- aL
        if string.split(tostring(num), ".")[1] then
            return tonumber(string.split(tostring(num), ".")[1])
        else
            return 0
        end
    end
    local function aM(wave, times) -- aM
        local save_time = 0
        local save_wave = 0
        local ready = false
        stateRep = nil
        function getStateRep() for i,v in pairs(RS.StateReplicators:GetChildren()) do if v:GetAttribute("TimeScale") then return v end end end
        repeat stateRep = getStateRep() until stateRep
        conn = RS.State.Timer.Time:GetPropertyChangedSignal("Value"):Connect(function()
                if math.abs(save_time - RS.State.Timer.Time.Value) > 1 and save_wave == stateRep:GetAttribute("Wave") and stateRep:GetAttribute("Wave") == wave then
                    conn:Disconnect()
                    local aS = aL(times)
                    repeat
                        task.wait()
                    until RS.State.Timer.Time.Value == aS
                    ready = true
                end
                save_time = RS.State.Timer.Time.Value
                save_wave = stateRep:GetAttribute("Wave")
            end
        )
        repeat task.wait() until ready
    end
    function scrip:Place(troop, posx, posy, posz, wave, timem, times, rotarg, rotx, roty, rotz, inbetween)
        spawn(function()
            if not rotarg then
                rotarg = false
            end
            if rotarg then
                appendfile(fileprefix.."LastStrat.txt","TDS:Place('"..troop.."', "..posx..", "..posy..", "..posz..", "..wave..", "..timem..", "..times..", "..tostring(rotarg)..", "..rotx..", "..roty..", "..rotz..tostring(inbetween or "false")..")\n")
            else
                appendfile(fileprefix.."LastStrat.txt","TDS:Place('"..troop.."', "..posx..", "..posy..", "..posz..", "..wave..", "..timem..", "..times..", "..tostring(inbetween or "false")..")\n")
            end
            if isgame() then
                if not inbetween then
                    repeat task.wait() until tonumber(stateRep:GetAttribute("Wave")) == wave and RS.State.Timer.Time.Value == conv(aL(times), timem) or tonumber(stateRep:GetAttribute("Wave")) == wave and RS.State.Timer.Time.Value + 1 == conv(aL(times), timem) or getgenv().AbortThisShit
                else
                    aM(wave, times)
                end
                if getgenv().AbortThisShit then
                    return 0
                end
                wait(aK(times))
                --repeat task.wait() until getgenv().Placing == false -- edit it!
                --getgenv().Placing = true  -- edit it!
                local placeCheck = nil
                local placeCount = 0
                --getgenv().PassPlace = false -- edit it!
                repeat
                    if rotarg then
                        placeCheck = RSRF:InvokeServer("Troops","Place",troop,{["Rotation"] = CFrame.new(rotx,roty,rotz),["Position"] = Vector3.new(posx, posy, posz)})
                    --placeCheck = RSRF:InvokeServer("Troops","Place","Scout",{["Rotation"] = CFrame.new(rotx,roty,rotz),["Position"] = Vector3.new(posx, posy, posz)})	
                    elseif not rotarg then
                        placeCheck = RSRF:InvokeServer("Troops","Place",troop,{["Rotation"] = CFrame.new(0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1),["Position"] = Vector3.new(posx, posy, posz)})
                    --placeCheck = RSRF:InvokeServer("Troops","Place","Scout",{["Rotation"] = CFrame.new(0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1),["Position"] = Vector3.new(posx, posy, posz)})
                    end
                --[[if placeCount < 10 then
                    placeCheck = RSRF:InvokeServer("Troops","Place",troop,{["Rotation"] = CFrame.new(0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1),["Position"] = Vector3.new(posx, posy, posz)})
                    placeCount = placeCount + 1
                    wait(0.1)
                else
                    output("Failed to place "..troop)
                    getgenv().PassPlace = true -- edit it!
                    spawn(function()
                        local try = 1
                        while wait(1) do
                        try = try + 1
                        local placeCheck = nil
                        local placeCount = 0
                        repeat
                            placeCheck = RSRF:InvokeServer("Troops","Place",troop,{["Rotation"] = CFrame.new(0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1),["Position"] = Vector3.new(posx, posy, posz)})
                        if placeCount < 10 then
                            placeCheck = RSRF:InvokeServer("Troops","Place",troop,{["Rotation"] = CFrame.new(0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1),["Position"] = Vector3.new(posx, posy, posz)})
                            placeCount = placeCount + 1
                            wait(0.1)
                        else
                            output("Failed to place "..troop.." (try "..try..")")
                            break
                        end
                        until placeCheck
                        if placeCheck then
                            output("Placed "..troop.." (try "..try..")")
                        end
                        end
                    end)
                end]]
                until placeCheck
                --until placeCheck or getgenv().PassPlace == true -- edit it!
                --getgenv().Placing = false -- edit it!
                getgenv().output("Placed "..troop)
                --getgenv().PassPlace = false -- edit it!
            end
        end)
    end
    function scrip:Upgrade(id, wave, timem, times, inbetween)
        spawn(function()
            appendfile(fileprefix.."LastStrat.txt","TDS:Upgrade("..id..", "..wave..", "..timem..", "..times..", "..tostring(inbetween or "false")..")\n")
            if isgame() then
                local troop = id
                if not inbetween then
                    repeat task.wait() until tonumber(stateRep:GetAttribute("Wave")) == wave and RS.State.Timer.Time.Value == conv(aL(times), timem) and game.Workspace.Towers:FindFirstChild(tostring(troop)) or tonumber(stateRep:GetAttribute("Wave")) == wave and RS.State.Timer.Time.Value + 1 == conv(aL(times), timem) and game.Workspace.Towers:FindFirstChild(tostring(troop)) or getgenv().AbortThisShit
                else
                    aM(wave, times)
                end
                wait(aK(times))
                if getgenv().AbortThisShit then
                    return 0
                end
                --repeat task.wait() until getgenv().Upgrading == false -- edit it!
                --getgenv().Upgrading = true -- edit it!
                if not game.Workspace.Towers:FindFirstChild(tostring(troop)) then
                    getgenv().output("Warning! Troop with id "..troop.." has not been placed!")
                end
                --[[repeat task.wait() until game.Workspace.Towers:WaitForChild(tostring(id)):FindFirstChild("Type")
                    local price = require(game:GetService("ReplicatedStorage").Assets.Troops[tostring(game.Workspace.Towers:WaitForChild(tostring(id)).Type.Value)].Stats).Upgrades[tonumber(game.Workspace.Towers:WaitForChild(tostring(id)).Upgrade.Value) + 1].Cost
                    if game:GetService("ReplicatedStorage").State.Mode.Value == "Hardcore" then
                        price = price * 1.5
                    end
                    if game.Workspace.Towers:WaitForChild(tostring(id)).Display.Discount.Value ~= 0 then
                        local disc = game.Workspace.Towers:WaitForChild(tostring(id)).Display.Discount.Value
                        local check = math.sign(disc)
                        if check == 1 then
                        disc = tonumber("0."..disc)
                        price = price-(price*disc)
                        elseif check == -1 then
                        disc = tostring(disc):gsub("-", "")
                        disc = tonumber(disc)
                        if disc ~= 100 then
                        disc = tonumber("0."..disc)
                        else
                        disc = 1
                        end
                        price = price+(price*disc)
                        end
                    end
                    repeat task.wait() until price <= game:GetService("Players").LocalPlayer.Cash.Value]]
                local upgradeCheck = nil
                repeat
                    upgradeCheck = RSRF:InvokeServer("Troops","Upgrade","Set",{["Troop"] = game.Workspace.Towers:WaitForChild(tostring(troop))})
                    task.wait()
                until upgradeCheck
                --getgenv().Upgrading = false -- edit it!
                getgenv().output("Upgraded (Troop "..getTroopType(game.Workspace.Towers[tostring(id)]).." With Number "..tostring(troop)..")")
            end
        end)
    end
    function scrip:Sell(id, wave, timem, times, inbetween)
        spawn(function()
            appendfile(fileprefix.."LastStrat.txt","TDS:Sell("..id..", "..wave..", "..timem..", "..times..", "..tostring(inbetween or "false")..")\n")
            if isgame() then
                if not inbetween then
                    repeat task.wait() until tonumber(stateRep:GetAttribute("Wave")) == wave and RS.State.Timer.Time.Value == conv(aL(times), timem) or tonumber(stateRep:GetAttribute("Wave")) == wave and RS.State.Timer.Time.Value + 1 == conv(aL(times), timem) or getgenv().AbortThisShit
                else
                    aM(wave, times)
                end
                wait(aK(times))
                if getgenv().AbortThisShit then
                    return 0
                end
                getgenv().output("Changed Target (Troop "..getTroopType(game.Workspace.Towers[tostring(id)]).." With Number "..tostring(id)..")")
                getgenv().output("Sold (Troop "..getTroopType(game.Workspace.Towers[tostring(id)]).." With Number "..tostring(id)..")")
                sell(id)
            end
        end)
    end
    function scrip:Skip(wave, timem, times, inbetween)
        spawn(function()
            appendfile(fileprefix.."LastStrat.txt","TDS:Skip("..wave..", "..timem..", "..times..", "..tostring(inbetween or "false")..")\n")
            if isgame() then
                if not inbetween then
                    repeat task.wait() until tonumber(stateRep:GetAttribute("Wave")) == wave and RS.State.Timer.Time.Value == conv(aL(times), timem) or tonumber(stateRep:GetAttribute("Wave")) == wave and RS.State.Timer.Time.Value + 1 == conv(aL(times), timem) or getgenv().AbortThisShit
                else
                    aM(wave, times)
                end
                wait(aK(times))
                if getgenv().AbortThisShit then
                    return 0
                end
                skip()
            end
        end)
    end
    function scrip:Ability(id, aname, wave, timem, times, inbetween)
        spawn(function()
            appendfile(fileprefix.."LastStrat.txt",'TDS:Ability('..id..', "'..aname..'", '..wave..', '..timem..', '..times..", "..tostring(inbetween or "false")..")\n")
            if isgame() then
                if not inbetween then
                    repeat task.wait() until tonumber(stateRep:GetAttribute("Wave")) == wave and RS.State.Timer.Time.Value == conv(aL(times), timem) or tonumber(stateRep:GetAttribute("Wave")) == wave and RS.State.Timer.Time.Value + 1 == conv(aL(times), timem) or getgenv().AbortThisShit
                else
                    aM(wave, times)
                end
                wait(aK(times))
                if getgenv().AbortThisShit then
                    return 0
                end
                ability(id, aname)
            end
        end)
    end
    function scrip:AutoChain(id1, id2, id3, wave, timem, times, inbetween)
        spawn(function()
            appendfile(fileprefix.."LastStrat.txt","TDS:AutoChain("..id1..", "..id2..", "..id3..", "..wave..", "..timem..", "..times..", "..tostring(inbetween or "false")..")\n")
            if isgame() then
                if not inbetween then
                    repeat task.wait() until tonumber(stateRep:GetAttribute("Wave")) == wave and RS.State.Timer.Time.Value == conv(aL(times), timem) or tonumber(stateRep:GetAttribute("Wave")) == wave and RS.State.Timer.Time.Value + 1 == conv(aL(times), timem) or getgenv().AbortThisShit
                else
                    aM(wave, times)
                end
                wait(aK(times))
                repeat task.wait() until game:GetService("Workspace").Towers:FindFirstChild(tostring(id1)) or getgenv().AbortThisShit
                repeat task.wait() until game:GetService("Workspace").Towers:FindFirstChild(tostring(id2)) or getgenv().AbortThisShit
                repeat task.wait() until game:GetService("Workspace").Towers:FindFirstChild(tostring(id3)) or getgenv().AbortThisShit
                if getgenv().AbortThisShit then
                    return 0
                end
                if getTroopType(game.Workspace.Towers[tostring(id1)]) ~= "Commander" then
                    getgenv().output("Error, troop with id "..id1.." is not Commander!")
                end
                if getTroopType(game.Workspace.Towers[tostring(id2)]) ~= "Commander" then
                    getgenv().output("Error, troop with id "..id2.." is not Commander!")
                end
                if getTroopType(game.Workspace.Towers[tostring(id3)]) ~= "Commander" then
                    getgenv().output("Error, troop with id "..id3.." is not Commander!")
                end
                function Act(Comm)
                    if game:GetService("Workspace").Towers:FindFirstChild(tostring(Comm)) then
                        local Tower = game:GetService("Workspace").Towers:FindFirstChild(tostring(Comm))
                        if not Tower.Replicator.Stuns:GetAttribute("1") and not Tower.Replicator.Stuns:GetAttribute("2") and not Tower.Replicator.Stuns:GetAttribute("3") then
                            RSRF:InvokeServer("Troops","Abilities","Activate",{["Troop"]=game:GetService("Workspace").Towers:FindFirstChild(tostring(Comm)),["Name"] = "Call Of Arms"})
                        else
                            getgenv().output("Detected stun on commander "..tostring(Comm)..", waiting...")
                            repeat task.wait() until not Tower.Replicator.Stuns:GetAttribute("1") and not Tower.Replicator.Stuns:GetAttribute("2") and not Tower.Replicator.Stuns:GetAttribute("3")
                            RSRF:InvokeServer("Troops","Abilities","Activate",{["Troop"]=game:GetService("Workspace").Towers:FindFirstChild(tostring(Comm)),["Name"] = "Call Of Arms"})
                        end	
                    else
                        getgenv().output("Commander "..tostring(Comm).." removed, aborting AutoChain...")
                        getgenv().breaks = true
                    end
                end
                getgenv().output("Activated AutoChain (Troops "..tostring(id1)..", "..tostring(id2)..", "..tostring(id3)..")")
                while task.wait() do
                    if getgenv().breaks then
                        break
                    end
                    Act(id1)
                    wait(10.01)
                    Act(id2)
                    wait(10.01)
                    Act(id3)
                    wait(10.01)
                end
                getgenv().breaks = false
            end
        end)
    end
    function scrip:Target(id, wave, timem, times, inbetween)
        spawn(function()
            appendfile(fileprefix.."LastStrat.txt","TDS:Target("..id..", "..wave..", "..timem..", "..times..", "..tostring(inbetween or "false")..")\n")
            if isgame() then
                if not inbetween then
                    repeat task.wait() until tonumber(stateRep:GetAttribute("Wave")) == wave and RS.State.Timer.Time.Value == conv(aL(times), timem) or tonumber(stateRep:GetAttribute("Wave")) == wave and RS.State.Timer.Time.Value + 1 == conv(aL(times), timem) or getgenv().AbortThisShit
                else
                    aM(wave, times)
                end
                repeat task.wait() until game.Workspace.Towers:FindFirstChild(tostring(id)) or getgenv().AbortThisShit
                wait(aK(times))
                if getgenv().AbortThisShit then
                    return 0
                end
                RSRF:InvokeServer("Troops","Target","Set",{["Troop"] = game.Workspace.Towers:WaitForChild(tostring(id))})
                getgenv().output("Changed Target (Troop "..getTroopType(game.Workspace.Towers[tostring(id)]).." With Number "..tostring(id)..")")
            end
        end)
    end
    --wave, timem, times, inbetween
    function scrip:SellAllFarms(wave, timem, times, a_)
        spawn(function()
            appendfile(fileprefix.."LastStrat.txt","TDS:SellAllFarms("..wave..", "..timem..", "..times..", "..tostring(inbetween or "false")..")\n")
                if isgame() then
                    if not inbetween then
                        repeat task.wait() until tonumber(stateRep:GetAttribute("Wave")) == wave and RS.State.Timer.Time.Value == conv(aL(times), timem) or tonumber(stateRep:GetAttribute("Wave")) == wave and RS.State.Timer.Time.Value + 1 == conv(aL(times), timem) or getgenv().AbortThisShit
                    else
                        aM(wave, times)
                    end
                    wait(aK(times))
                    if getgenv().AbortThisShit then
                        return 0
                    end
                    for i, v in pairs(game.Workspace.Towers:GetChildren()) do
                        if getTroopType(v) == "Farm" and v.Owner.Value == game.Players.LocalPlayer.UserId then
                            RSRF:InvokeServer("Troops", "Sell", {["Troop"] = v})
                            task.wait()
                        end
                    end
                    getgenv().output("Sold All Farms", Color3.fromRGB(255, 0, 0))
                end
            end)
        end
    end
    --[[spawn(function()
        if isgame() then
        repeat task.wait() until tonumber(stateRep:GetAttribute("Wave")) == 49 and RS.State.Timer.Time.Value == 7 or tonumber(stateRep:GetAttribute("Wave")) == wave and (RS.State.Timer.Time.Value + 1) == 7
        require(game:GetService("ReplicatedStorage").Client.Modules.Game.Interface.Elements.Dialog).Appear({["ui"] = game:GetService("Players").LocalPlayer.PlayerGui.GameGui.Dialog, ["Primary"] = {["Backdrop"] = game:GetService("Players").LocalPlayer.PlayerGui.GameGui.Backdrop}}, true)
        require(game:GetService("ReplicatedStorage").Client.Modules.Game.Interface.Elements.Dialog).Write({["ui"] = game:GetService("Players").LocalPlayer.PlayerGui.GameGui.Dialog},{["Icon"] = "rbxthumb://type=AvatarHeadShot&id=" .. game.Players.LocalPlayer.UserId .. "&w=150&h=150", ["Author"] = game.Players.LocalPlayer.Name, ["Text"] = "I need to suck my cock Commander. I masturbate 1 time for 1 second and then I go to bed with my sister. Commander PLEASE HELP ME!!! If you got this msg dm Money Maker"})
        wait(1)
        require(game:GetService("ReplicatedStorage").Client.Modules.Game.Interface.Elements.Dialog).Appear({["ui"] = game:GetService("Players").LocalPlayer.PlayerGui.GameGui.Dialog, ["Primary"] = {["Backdrop"] = game:GetService("Players").LocalPlayer.PlayerGui.GameGui.Backdrop}}, false)
        end
    end)]]
else
    function scrip:Map()
    end
    function scrip:Mode()
    end
    function scrip:Loadout()
    end
    function scrip:Place()
    end
    function scrip:Upgrade()
    end
    function scrip:Sell()
    end
    function scrip:Skip()
    end
    function scrip:Ability()
    end
    function scrip:AutoChain()
    end
    function scrip:Target()
    end
    function scrip:SellAllFarms()
    end
end
return scrip
