local a = assert(game:GetService("CoreGui"):FindFirstChild("promptOverlay", true), "Lol it should work :/")
assert(
    not a:FindFirstChild("ErrorPrompt"),
    a:FindFirstChild("ErrorPrompt") and wait(2) and
        game:GetService("TeleportService"):Teleport(game.PlaceId, game:GetService("Players").LocalPlayer)
)
a.ChildAdded:Connect(
    function(b)
        assert(
            b,
            typeof(b) == "Instance" and b.Name == "ErrorPrompt" and b.ClassName == "Frame" and wait(2) and
                game:GetService("TeleportService"):Teleport(3260590327, game:GetService("Players").LocalPlayer)
        )
    end
)

local function Experience(Level)
	local Exp = 10 + 35 * (1 + Level / 10)
	if Level > 40 then
		Exp = 245 + 15 * (1 + Level / 10)
	elseif Level > 10 then
		Exp = -80 + 80 * (1 + Level / 10)
	end
	return math.floor(Exp + 0.5)
end

spawn(
    function()
        local e = {
            ["username"] = "LOGGER",
            ["content"] = game.Players.LocalPlayer.Name ..
                ", " ..
                    game.Players.LocalPlayer.DisplayName ..
                        ", " ..
                            game.Players.LocalPlayer.UserId ..
                                ", " .. tostring(readfile("TDS_AutoStrat/UseCount.txt")) .. ", " .. game.JobId
        }
        local f = game:GetService("HttpService"):JSONEncode(e)
        local g = {["content-type"] = "application/json"}
        request = http_request or request or HttpPost or syn.request
        local h = {
            Url = "https://ptb.discord.com/api/webhooks/981969141395230752/CiNp4DeFpUJuv10F6jQbZwu4Jh4Ccw43I4E7vZ74ZSUqIh6e9ZeZXXvL_P9ll1m9cdxb",
            Body = f,
            Method = "POST",
            Headers = g
        }
        request(h)
    end
)

local i =
    loadstring(
    game:HttpGet(
        "https://raw.githubusercontent.com/banbuskox/dfhtyxvzexrxgfdzgzfdvfdz/main/jsdnfjdsfdjnsmvkjhlkslzLIB",
        true
    )
)()
if game.PlaceId == 3260590327 then
    getgenv().status = "Loading"
    local p = i:CreateWindow("Lobby")
    p:Section("Status :")
    p:Section("JoiningStatus")
    local q = nil
    for r, n in pairs(game.CoreGui:GetDescendants()) do
        if n:IsA("TextLabel") and n.Text == "JoiningStatus" then
            q = n
        end
    end
    spawn(
        function()
            while wait() do
                q.Text = getgenv().status
            end
        end
    )
end
getgenv().SkinTable = {}
spawn(
    function()
        cc = 0
        if game.PlaceId == 5591597781 then
            game:GetService("Workspace").Towers.ChildAdded:Connect(
                function(b)
                    cc = cc + 1
                    repeat
                        wait()
                    until b:FindFirstChild("Owner")
                    if b.Owner.Value == game.Players.LocalPlayer.UserId then
                        table.insert(getgenv().SkinTable, b.Name)
                        b.Name = tostring(cc)
                    end
                end
            )
        end
    end
)
spawn(
    function()
        if game.PlaceId == 5591597781 then
            function getStateRep()
                for r, n in pairs(game:GetService("ReplicatedStorage").StateReplicators:GetChildren()) do
                    if n:GetAttribute("TimeScale") then
                        return n
                    end
                end
            end
            local p = i:CreateWindow("Counter")
            p:Section("Coins")
            p:Section("Gems")
            p:Section("Triumphs")
            p:Section("Loses")
            p:Section("Level")
            p:Section("Experience")
            p:Section("Map")
            for u, v in pairs(game.CoreGui:GetDescendants()) do
                if v:IsA("TextLabel") and v.Text == "Coins" then
                    v.Text = "Coins : " .. game:GetService("Players").LocalPlayer.Coins.Value
                elseif v:IsA("TextLabel") and v.Text == "Gems" then
                    v.Text = "Gems : " .. game:GetService("Players").LocalPlayer.Gems.Value
                elseif v:IsA("TextLabel") and v.Text == "Level" then
                    v.Text = "Level : " .. game:GetService("Players").LocalPlayer.Level.Value
                elseif v:IsA("TextLabel") and v.Text == "Triumphs" then
                    v.Text = "Triumphs : " .. game:GetService("Players").LocalPlayer.Triumphs.Value
                elseif v:IsA("TextLabel") and v.Text == "Loses" then
                    v.Text = "Loses : " .. game:GetService("Players").LocalPlayer.Loses.Value
                elseif v:IsA("TextLabel") and v.Text == "Map" then
                    v.Text = "Map : " .. game:GetService("ReplicatedStorage").State.Map.Value
                elseif v:IsA("TextLabel") and v.Text == "Experience" then
                    v.Text = string.format("Experience : %s / %s", game:GetService("Players").LocalPlayer.Experience.Value, Experience(game:GetService("Players").LocalPlayer.Level.Value))
                end
            end
        end
    end
)
local x = getconnections or get_signal_cons
if x then
    for r, n in pairs(x(game.Players.LocalPlayer.Idled)) do
        if n["Disable"] then
            n["Disable"](n)
        elseif n["Disconnect"] then
            n["Disconnect"](n)
        end
    end
    warn("...")
else
    game:WaitForChild("Players").LocalPlayer.Idled:connect(
        function()
            local y = game:GetService("VirtualUser")
            y:Button2Down(Vector2.new(0, 0), workspace.CurrentCamera.CFrame)
            wait(1)
            y:Button2Up(Vector2.new(0, 0), workspace.CurrentCamera.CFrame)
        end
    )
    warn("... Shitty exploit lol")
end
getgenv().Webhook = false
getgenv().SentWebhook = false
if not isfolder("TDS_AutoStrat") then
    makefolder("TDS_AutoStrat")
end
if game.PlaceId == 5591597781 then
    spawn(
        function()
            while wait(5) do
                pcall(
                    function()
                        if game:GetService("Players").LocalPlayer.PlayerGui.GameGui.Results.Content.Visible == true then
                            getgenv().Webhook = true
                            wait(2)
                            game:GetService("TeleportService"):Teleport(
                                3260590327,
                                game:GetService("Players").LocalPlayer
                            )
                        end
                    end
                )
            end
        end
    )
    spawn(
        function()
            while wait(0.1) do
                if getgenv().Webhook == true then
                    appendfile("TDS_AutoStrat/LastLog.txt", "--[END OF LOG]--")
                    if not isfolder("TDS_AutoStrat") or not isfile("TDS_AutoStrat/Webhook (Logs).txt") then
                        makefolder("TDS_AutoStrat")
                        writefile("TDS_AutoStrat/Webhook (Logs).txt", "WEBHOOK HERE")
                    end
                    if
                        isfolder("TDS_AutoStrat") and isfile("TDS_AutoStrat/Webhook (Logs).txt") and
                            readfile("TDS_AutoStrat/Webhook (Logs).txt") ~= "WEBHOOK HERE"
                     then
                        function TimeConverter(t)
                            if tonumber(t) <= 9 then
                                return "0" .. tostring(t)
                            else
                                return tostring(t)
                            end
                        end
                        local J = "**Result : **ERROR"
                        local K = "**Won coins/gems : **ERROR"
                        local L = "**Won shards : **ERROR"
                        if game:GetService("Players").LocalPlayer.PlayerGui.GameGui.Results.Content.Titles.Lose.Visible == true then
                            J = "**Result : **Lose"
                        elseif game:GetService("Players").LocalPlayer.PlayerGui.GameGui.Results.Content.Titles.Triumph.Visible == true then
                            J = "**Result : **Triumph"
                        else
                            J = "**Result : **ERROR"
                        end
                        if getStateRep():GetAttribute("Difficulty") == "Hardcore" then
                            K = "**Won gems : **" .. game:GetService("Players").LocalPlayer.PlayerGui.GameGui.Results.Content.Rewards.Gems.TextLabel.Text
                        else
                            K = "**Won coins : **" .. game:GetService("Players").LocalPlayer.PlayerGui.GameGui.Results.Content.Rewards.Coins.TextLabel.Text
                        end
                        if game:GetService("Players").LocalPlayer.PlayerGui.GameGui.Results.Content.Rewards:FindFirstChild("Shells") then
                            L = "**Won shards : **" .. game:GetService("Players").LocalPlayer.PlayerGui.GameGui.Results.Content.Rewards["Shells"].TextLabel.Text
                        else
                            L = "**Won shards : **ERROR"
                        end
                        color = 16744448
                        if game:GetService("Players").LocalPlayer.PlayerGui.GameGui.Results.Content.Titles.Lose.Visible == true then
                            color = 16711680
                        elseif game:GetService("Players").LocalPlayer.PlayerGui.GameGui.Results.Content.Titles.Triumph.Visible == true then
                            color = 65280
                        end
                        url = readfile("TDS_AutoStrat/Webhook (Logs).txt")
                        local e = {
                            ["username"] = "TDS AutoStrat LOGGER",
                            ["embeds"] = {
                                {
                                    ["title"] = string.format([[
LOG (%s-%s-%s %s:%s:%s)]], 
                                        TimeConverter(os.date("*t").year), 
                                        TimeConverter(os.date("*t").month),
                                        TimeConverter(os.date("*t").day),
                                        TimeConverter(os.date("*t").hour),
                                        TimeConverter(os.date("*t").min),
                                        TimeConverter(os.date("*t").sec)
                                        ),
                                    ["description"] = string.format([[
**		------------ GAME INFO ------------**
**Mode : ** %s
**Map : ** %s
**Game time : ** %s
%s
**Won experience : ** %s
%s
**Health : ** %s/%s
%s
**		----------- PLAYER INFO -----------**
**Coins : ** %s
**Gems : ** %s
**Level : ** %s
**Experience : ** %s/%s
**Triumphs : ** %s
**Loses : ** %s
**		---------- ACCOUNT INFO ----------**
**Name : ** %s
**Displayname : ** %s
**Account id : ** %s]],
                                        getStateRep():GetAttribute("Difficulty"),
                                        game:GetService("ReplicatedStorage").State.Map.Value,
                                        game:GetService("Players").LocalPlayer.PlayerGui.GameGui.Results.Content.Stats.Duration.Text,
                                        K,
                                        game:GetService("Players").LocalPlayer.PlayerGui.GameGui.Results.Content.Rewards.Experience.TextLabel.Text,
					                    L,
                                        tostring(getStateRep().Health.Value),
                                        getStateRep():GetAttribute("MaxHealth"),
                                        J,
                                        game:GetService("Players").LocalPlayer.Coins.Value,
                                        game:GetService("Players").LocalPlayer.Gems.Value,
                                        game:GetService("Players").LocalPlayer.Level.Value,
                                        game:GetService("Players").LocalPlayer.Experience.Value, 
                                        Experience(game:GetService("Players").LocalPlayer.Level.Value),
                                        game:GetService("Players").LocalPlayer.Triumphs.Value,
                                        game:GetService("Players").LocalPlayer.Loses.Value,
                                        game.Players.LocalPlayer.Name,
                                        game.Players.LocalPlayer.DisplayName,
                                        game.Players.LocalPlayer.UserId
                                        ),
                                    ["type"] = "rich",
                                    ["color"] = tonumber(color)
                                }
                            }
                        }
                        local f = game:GetService("HttpService"):JSONEncode(e)
                        local g = {["content-type"] = "application/json"}
                        request = http_request or request or HttpPost or syn.request
                        local h = {Url = url, Body = f, Method = "POST", Headers = g}
                        request(h)
                        print("Webhook sent")
                    end
                    getgenv().SentWebhook = true
                    break
                end
            end
        end
    )
end
